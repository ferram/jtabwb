/*******************************************************************************
 * Copyright (C) 2013, 2015 Mauro Ferrari
 * 
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 3 of the License, or (at your option) any later
 * version.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package jtabwb.tracesupport;

import java.io.PrintStream;
import java.util.Collection;

import jtabwb.engine.ProofSearchResult;
import jtabwb.engine.Trace;
import jtabwb.engine._Prover;

/**
 * An object of this class represents a C-Tree.
 * 
 * @author Mauro Ferrari
 */
public class CTree {

  private int id;
  private _Prover prover;
  private CTreeNode root;

  /**
   * Constructs a C-tree generated by the specified prover, with
   * <code>root</code> as root node, and with <code>status</code> as
   * proof-search status.
   * 
   * @param prover the prover generating the C-tree.
   * @param root the root node of the C-tree.
   * @param status the status of the C-tree.
   */
  CTree(_Prover prover, CTreeNode root, int id) {
    super();
    this.prover = prover;
    this.root = root;
  }

  /**
   * Returns the prover that generated the C-tree.
   * 
   * @return the prover generating the C-tree.
   */
  public _Prover getProver() {
    return this.prover;
  }

  /**
   * @return the id
   */
  public int getId() {
    return this.id;
  }

  /**
   * Returns the node at the root of the C-tree.
   * 
   * @return the node at the root of the C-tree.
   */
  public CTreeNode getRoot() {
    return this.root;
  }

  /**
   * Returns the status of the C-tree.
   * 
   * @return the status of the C-tree.
   */
  public ProofSearchResult getStatus() {
    return root.getStatus();
  }

  /**
   * Builds the collection of C-trees described by the specified proof-search
   * trace.
   * 
   * @param trace the trace of the proof-search.
   * @return the collection of C-trees described by the proof-search
   */
  public static Collection<CTree> buildFrom(Trace trace) {
    CTreeBuilder builder = new CTreeBuilder(trace);
    return builder.build();
  }

  
  
  /**
   * TODO: move to CTreeLatexGenerator
   * Prints on the specified stream the LaTeX of the specified collection of
   * C-trees.
   * 
   * @param ctrees the C-trees to represent.
   * @param out the stream.
   * @param formatter the formatter used to generate the latex of the C-trees.
   */
  public static void toLatex(Collection<CTree> ctrees, PrintStream out,
      _LatexCTreeFormatter formatter) {
    CTreeLatexGenerator translator = new CTreeLatexGenerator(ctrees, formatter);
    translator.generateLatex(out);
  }

  /**
   * TDOO: move to CTreeLatexGenerator
   * Prints on the specified stream the LaTeX of this C-tree.
   * 
   * @param out the stream.
   * @param formatter the formatter used to generate the latex of this C-tree.
   */
  public void toLatex(PrintStream out, _LatexCTreeFormatter formatter) {
    CTreeLatexGenerator translator = new CTreeLatexGenerator(this, formatter);
    translator.generateLatex(out);
  }

}
